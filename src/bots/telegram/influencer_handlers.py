import re
import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from src.core.social_factory import SocialProviderFactory
from src.core.ai_factory import AIFactory

influencer_router = Router()

VK_REGEX = re.compile(r"(?:https?://)?vk\.com/([A-Za-z0-9_\.]+)")
VK_GROUP_REGEX = re.compile(r"(?:https?://)?vk\.com/(club|public)([0-9]+)")

@influencer_router.message(F.text.in_(["/start", "/help"]))
async def cmd_start(message: Message, state: FSMContext):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üë§ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="choose_profile"),
            InlineKeyboardButton(text="üë• –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø—É", callback_data="choose_group")
        ]
    ])
    await state.clear()
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ –±—É–¥–µ–º –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å?",
        reply_markup=keyboard
    )

@influencer_router.callback_query(F.data == "choose_profile")
async def choose_profile(callback: CallbackQuery, state: FSMContext):
    await state.set_data({"entity_type": "profile"})
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üß† –ü—Å–∏—Ö–æ–∞–Ω–∞–ª–∏–∑", callback_data="analyze_psy"),
            InlineKeyboardButton(text="üìä –ê–Ω–∞–ª–∏–∑ –¥–ª—è —Ä–µ–∫–ª–∞–º—ã", callback_data="analyze_influencer")
        ]
    ])
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏, –∫–∞–∫–æ–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–≤–µ—Å—Ç–∏ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è:",
        reply_markup=keyboard
    )
    await callback.answer()

@influencer_router.callback_query(F.data == "choose_group")
async def choose_group(callback: CallbackQuery, state: FSMContext):
    await state.set_data({"entity_type": "group"})
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìä –ê–Ω–∞–ª–∏–∑ –¥–ª—è —Ä–µ–∫–ª–∞–º—ã", callback_data="analyze_group_influencer")
        ]
    ])
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏, –∫–∞–∫–æ–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–≤–µ—Å—Ç–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã:",
        reply_markup=keyboard
    )
    await callback.answer()

@influencer_router.callback_query(F.data == "analyze_psy")
async def ask_profile_for_psy(callback: CallbackQuery, state: FSMContext):
    await state.update_data({"analysis_type": "psych"})
    await callback.message.answer("–ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ VK-–ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø—Å–∏—Ö–æ–∞–Ω–∞–ª–∏–∑–∞")
    await callback.answer()

@influencer_router.callback_query(F.data == "analyze_influencer")
async def ask_profile_for_influencer(callback: CallbackQuery, state: FSMContext):
    await state.update_data({"analysis_type": "influencer"})
    await callback.message.answer("–ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ VK-–ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∫–ª–∞–º—ã")
    await callback.answer()

@influencer_router.callback_query(F.data == "analyze_group_influencer")
async def ask_group_for_influencer(callback: CallbackQuery, state: FSMContext):
    await state.update_data({"analysis_type": "group_influencer"})
    await callback.message.answer("–ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ VK-–≥—Ä—É–ø–ø—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∫–ª–∞–º—ã")
    await callback.answer()

@influencer_router.message()
async def fallback_handler(message: Message, state: FSMContext):
    user_state = await state.get_data()
    entity_type = user_state.get("entity_type")
    analysis_type = user_state.get("analysis_type")
    if not entity_type or not analysis_type:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å, —á–µ—Ä–µ–∑ –º–µ–Ω—é /start ‚¨áÔ∏è")
        return
    text = message.text.strip()
    try:
        if entity_type == "profile" and analysis_type:
            await message.answer("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é VK-–ø—Ä–æ—Ñ–∏–ª—å‚Ä¶")
            provider, _, entity_id = SocialProviderFactory.get_entity_provider_by_url(text)
            entity = await provider.get_entity(entity_id, "profile")
            ai_provider = AIFactory.get_provider(analysis_type)
            report = await ai_provider.analyze(entity, analysis_type)
            await message.answer(report)
        elif entity_type == "group" and analysis_type == "group_influencer":
            await message.answer("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é VK-–≥—Ä—É–ø–ø—É‚Ä¶")
            provider, _, entity_id = SocialProviderFactory.get_entity_provider_by_url(text)
            entity = await provider.get_entity(entity_id, "group")
            ai_provider = AIFactory.get_provider("group_influencer")
            report = await ai_provider.analyze(entity, "group_influencer")
            await message.answer(report)
        else:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏, —á—Ç–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏ –∫–∞–∫–æ–π —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞ —á–µ—Ä–µ–∑ –º–µ–Ω—é /start")
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ VK-—Å—É—â–Ω–æ—Å—Ç–∏")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ. –ü—Ä–æ–≤–µ—Ä—å —Å—Å—ã–ª–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ /start. –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è ‚Äî –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ.") 