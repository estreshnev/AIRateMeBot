import logging
from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from src.core.social_factory import SocialProviderFactory
from src.core.ai_factory import AIFactory

influencer_router = Router()

@influencer_router.message(F.text.in_(["/start", "/help"]))
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    await state.set_data({"entity_type": "profile", "analysis_type": "psych"})
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ VK-–ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø—Å–∏—Ö–æ–∞–Ω–∞–ª–∏–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://vk.com/id1)")

@influencer_router.message()
async def fallback_handler(message: Message, state: FSMContext):
    user_state = await state.get_data()
    entity_type = user_state.get("entity_type")
    analysis_type = user_state.get("analysis_type")
    if entity_type != "profile" or analysis_type != "psych":
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ VK-–ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø—Å–∏—Ö–æ–∞–Ω–∞–ª–∏–∑–∞ —á–µ—Ä–µ–∑ /start")
        return
    text = message.text.strip()
    try:
        await message.answer("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é VK-–ø—Ä–æ—Ñ–∏–ª—å‚Ä¶")
        provider, _, entity_id = SocialProviderFactory.get_entity_provider_by_url(text)
        entity = await provider.get_entity(entity_id, "profile")
        ai_provider = AIFactory.get_provider("psych")
        report = await ai_provider.analyze(entity, "psych")
        await message.answer(report, parse_mode='Markdown')
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Å–∏—Ö–æ–∞–Ω–∞–ª–∏–∑–µ VK-–ø—Ä–æ—Ñ–∏–ª—è")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ. –ü—Ä–æ–≤–µ—Ä—å —Å—Å—ã–ª–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ /start. –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è ‚Äî –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ.") 