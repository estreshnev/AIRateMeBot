# src/bots/telegram/handlers.py
import re
import logging
from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext

from src.config import MODEL_SOURCE
from src.social.vk import parse_vk_profile

# –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –æ—Ç—á—ë—Ç–∞
async def get_generator(analyze_type: str):
    if analyze_type == "psy":
        if MODEL_SOURCE == "claude":
            from src.providers.claude_psych import generate_report
        else:
            from src.providers.openai_psych import generate_report
    else:
        if MODEL_SOURCE == "claude":
            from src.providers.claude import generate_report
        else:
            from src.providers.openai import generate_report
    return generate_report

router = Router()

VK_REGEX = re.compile(r"(?:https?://)?vk\.com/([A-Za-z0-9_\.]+)")

@router.message(F.text.in_(["/start", "/help"]))
async def cmd_start(message: Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üß† –ü—Å–∏—Ö–æ–∞–Ω–∞–ª–∏–∑", callback_data="analyze_psy"),
            InlineKeyboardButton(text="üìä –û—Ü–µ–Ω–∫–∞ –±—Ä–µ–Ω–¥–∞", callback_data="analyze_main")
        ]
    ])
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é VK-–ø—Ä–æ—Ñ–∏–ª–∏ –∏ –¥–∞—é AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.\n\n"
        "–ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ VK (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://vk.com/id1).",
        reply_markup=keyboard
    )

@router.callback_query(F.data.startswith("analyze_"))
async def switch_analysis_mode(callback: CallbackQuery, state: FSMContext):
    analyze_type = callback.data.replace("analyze_", "")
    await state.update_data(analyze_type=analyze_type)
    await callback.answer(f"–¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞: {analyze_type}")
    await callback.message.edit_reply_markup()  # —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏

@router.message()
async def handle_profile(message: Message, state: FSMContext):
    text = message.text.strip()
    vk_match = VK_REGEX.match(text)

    if vk_match:
        username = vk_match.group(1)
        await message.answer("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é VK-–ø—Ä–æ—Ñ–∏–ª—å‚Ä¶")

        try:
            profile = await parse_vk_profile(username)
            user_state = await state.get_data()
            analyze_type = user_state.get("analyze_type", "main")
            generate_report = await get_generator(analyze_type)
            report = await generate_report(profile)
            await message.answer(report)
        except Exception as e:
            logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ VK-–ø—Ä–æ—Ñ–∏–ª—è")
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
    else:
        await message.answer("ü§î –ù–µ –ø–æ–Ω—è–ª. –ü—Ä–∏—à–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ VK (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://vk.com/id1).")

def register_handlers(dp):
    from .psy_handlers import psy_router
    from .influencer_handlers import influencer_router
    dp.include_router(psy_router)
    dp.include_router(influencer_router)
